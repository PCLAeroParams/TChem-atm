{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>TChem-atm is a chemistry solver for problems in atmospheric chemistry. TChem-atm computes source terms and Jacobian matrices for chemical systems. It is a performance-portable software toolkit designed for complex kinetic mechanisms.</p> <p>Software Design:</p> <ul> <li>Modern C++.</li> <li>Kokkos programming model for performance portability.</li> <li>CMake build system.</li> <li>Numerical and SACADO analytic Jacobian calculations for all models.</li> <li>Coupling to external ODE solvers, e.g., Tines, Sundials (CVODE), Kokkos-kernels(BDF).</li> <li>Continuous integration with GitHub Actions.</li> <li>Code coverage with Codecov. </li> <li>Online documentation deployed with GitHub Actions.</li> <li>Docker support. </li> </ul> <p></p> <p>TChem-atm is configured using a YAML input file to construct the internal representation of the kinetic model, containing relevant parameters for the computation of chemical source terms. It computes reaction constants and rates of progress for all reactions and calculates the net production rate, or source terms, for all chemical species. Furthermore, it provides an interface for gas-aerosol interactions that allows coupling with aerosol models. TChem-atm automatically calculates the Jacobian matrix for source terms using either finite differences (numerical Jacobian) or automatic differentiation (analytical Jacobian via SACADO). Furthermore, the computation of the source term and associated Jacobian is independent of the time integration solver in TChem-atm. As such, TChem-atm provides an interface for time-stepping solutions (Box model) for the Tines, CVODE, and Kokkos-kernels libraries. Finally, TChem-atm features a batched interface for all of the above calculations.</p>"},{"location":"#citations","title":"Citations","text":"<ul> <li>TChem: A performance portable parallel software toolkit for complex kinetic mechanisms.</li> </ul> <pre><code>@article{tchem:Kim:2022,\n  title    = {{TChem: A performance portable parallel software toolkit for complex kinetic mechanisms}},\n  journal  = {Computer Physics Communications},\n  volume   = {285},\n  pages    = {108628},\n  year     = {2023},\n  issn     = {0010-4655},\n  author   = {Kyungjoo Kim and Oscar H. D\u00edaz-Ibarra and Habib N. Najm and Judit Z\u00e1dor and Cosmin Safta},\n  keywords = {TChem, Kokkos, Performance portability, GPU, Flow chemistry}\n}\n</code></pre> <ul> <li>\"Benchmarking TChem for Potential Incorporation into E3SM as a Replacement Chemical Kinetics Solver\" <pre><code>@techreport{Diaz-Ibarra:2024:tchem,\n  author      = {Diaz-Ibarra, Oscar and Schmidt, Michael J.  and Safta, Cosmin },\n  title       = {{Benchmarking TChem for Potential Incorporation into E3SM as a Replacement Chemical Kinetics Solver}},\n  institution = {Sandia National Laboratories},\n  year        = {2024},\n  number      = {SAND2024-01807R}\n}\n</code></pre></li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>The installation guide demonstrates how to obtain, build, and install TChem-atm along with the requisite third-party libraries.</p>"},{"location":"#theoretical-background","title":"Theoretical Background","text":"<p>TChem-atm's approach is briefly described in the Methodology section.</p>"},{"location":"#input-file","title":"Input File","text":"<p>A description of the configuration file is presented in the Input File section.</p>"},{"location":"#examples","title":"Examples","text":"<p>A list of examples can be found here.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>TChem-atm development has been supported by the following funding sources:</p> <ul> <li> <p>Sandia Laboratory Directed Research and Development (LDRD) projects \"Bridging aerosol representations across scales with physics-constrained statistical learning\" and \"Benchmarking TChem for Potential Incorporation into E3SM as a Replacement Chemical Kinetics Solver.\"</p> </li> <li> <p>The EAGLES project, which was funded by the Office of Science's Biological and Environmental Research Program.</p> </li> <li> <p>Exascale Catalytic Chemistry (ECC) Project.</p> </li> </ul>"},{"location":"CB5_example/","title":"Carbon Bond 05 Chemical System","text":"<p>We adapted the Carbon Bond 05 reaction mechanism from the CAMP chemistry code.</p> <p>Mechanism details:</p> <ul> <li>Number of Species: 67</li> <li>Number of Reactions: 187</li> <li>Arrhenius type reactions: 168</li> <li>CMAQ_H2O2 type reactions : 3</li> <li>Troe type reactions: 16</li> <li>Sources e.g., EMISSION: 14</li> </ul> <p>This mechanism, used for testing the CAMP solver, contains 26 photolysis reactions, which we replace with Arrhenius-type reactions that have energy = 0 and temperature coefficient = 1.</p> <p>Scripts to run and plot the outputs of this example are at: <code>src/examples/runs/atmospheric_chemistry/CB05CL_AE5</code>. The bash script to run this mechanism is shown below:</p> <pre><code>exec=$TCHEM_INSTALL_PATH/examples/TChem_AtmosphericChemistry.x\n\nrun_this=\"$exec --chemfile=config_full_gas.yaml \\\n                --outputfile=full_gas.dat \\\n                --time-iterations-per-interval=10 \\\n                --tol-time=1e-10 \\\n                --dtmin=1e-20 \\\n                --dtmax=10 \\\n                --tend=600\\\n                --atol-newton=1e-18 \\\n                --rtol-newton=1e-8 \\\n                --max-newton-iterations=20 \\\n                --max-time-iterations=20000\"\n\necho $run_this\neval $run_this\n</code></pre> <p>Here, the <code>TChem_AtmosphericChemistry.x</code> executable is a box model that integrates (in time) a list of species using the mechanism file from the input \"<code>chemfile</code>\", which in this case is <code>config_full_gas.yaml</code>. The system is a box model or zero-dimensional system that only considers chemical reactions. The executable saves the time profiles for the species in <code>outputfile=full_gas.dat</code>. In the example directory, the Jupyter-notebook <code>PlotFullGas</code> plots the time profiles of each species from the TChem-atm simulation and compares to CAMP's outputs. Note that the CAMP output was previously computed and is saved in the TChem-atm repository.</p> <p>When running the <code>TChem_AtmosphericChemistry.x</code> executable, the user may change time integration parameters of the TrBDF2 solver. First, the Newton solver parameters are the absolute (<code>atol-newton</code>) and relative tolerance (<code>rtol-newton</code>) and the maximum number of iterations (<code>max-newton-iterations</code>). Second, the time step size is controlled using the <code>tol-time</code> parameter and the maximum (<code>dtmax</code>) and minimum (<code>dtmin</code>) time step values. Third, one of the parameters <code>tend</code> or <code>max-time-iterations</code> will determine end the simulation. Finally, one can find additional help information from the <code>TChem_AtmosphericChemistry.x</code> executable using <code>TChem_AtmosphericChemistry.x --help</code>.</p> <p> Comparing TChem-atm and CAMP outputs for the Carbon Bond 05 mechanism.</p>"},{"location":"SIMPOL_example/","title":"SIMPOL mass transfer","text":"<p>Scripts to run and plot the outputs of this example are located at: <code>$TCHEM_INSTALL_PATH/examples/runs/atmospheric_chemistry/Simpol</code>. The bash script to run this case is shown below:</p> <p><pre><code>exec=$TCHEM_INSTALL_PATH/examples/TChem_AerosolChemistry.x\n\nrun_this=\"$exec --chemfile=config_gas.yaml \\\n                --aerofile=test_SIMPOL_phase_transfer.yaml \\\n                --inputfile_particles=scenario_conditions_particle.yaml \\\n                --outputfile=full_gas.dat \\\n                --time-iterations-per-interval=10 \\\n                --max-time-iterations=100\\\n                --tol-time=1e-3 \\\n                --atol-time=1e-12 \\\n                --dtmin=1e-20 \\\n                --dtmax=10\\\n                --tend=1000 \\\n                --atol-newton=1e-12 \\\n                --rtol-newton=1e-8 \\\n                --max-newton-iterations=20 \\\n                --max-time-iterations=200000\"\n\necho $run_this\neval $run_this\n</code></pre> Here, the <code>TChem_AerosolChemistry.x</code> executable is a box model that integrates (in time) a list of species using the mechanism file specified in the <code>chemfile</code> and aerosol species specified in the <code>aerofile</code>.</p> <p>TChem-atm provides executables for CVODE, <code>$TCHEM_INSTALL_PATH/examples/TChem_AerosolChemistry_CVODE.x</code>, and Kokkos-Kernels, $<code>TCHEM_INSTALL_PATH/examples/TChem_AerosolChemistry_KokkosKernels.x</code>.</p> <p>The time profiles for ethanol and its aqueous solution are depicted in the figures below. These profiles were generated using TChem-atm, employing ODE solvers such as Tines, Kokkos-kernels (BDF), and Sundials (CVODE). For the purpose of code-to-code verification, we additionally showcase profiles derived from CAMP.</p> <p></p> <p></p>"},{"location":"UCI_example/","title":"UCI mechanism - E3SM Version 3 Chemistry","text":"<p>E3SM version 3 uses the UCI mechanism to model gas chemistry employing separate reaction mechanisms for the Troposphere and Stratosphere. As part of the Sandia LDRD project \"Benchmarking TChem for Potential Incorporation into E3SM as a Replacement Chemical Kinetics Solver\", we created TChem-atm input files for the UCI mechanism. In addition, we implemented reaction types that are needed to solve this chemistry mechanism in TChem-atm.</p> <p>E3SM currently employs the Community Atmospheric Model Pre-Processor (CAMPP) to generate a set of Fortran files that represent and solve the chemical kinetic model, which includes reaction coefficients, the right-hand side of volumetric mixing ratio (vmr, denoted \\(\\eta\\)), and ODE solvers (Implicit/Explicit solver). Ultimately, CAMPP aims to compute an updated vmr (\\(\\eta_{t+\\Delta t}\\)) for the troposphere and stratosphere.</p> <p>For additional information on this LDRD project, we recommend reading the SAND2024-01807R report. As described in the report, we employed TChem-atm to advance the system one-time step and compared these outputs with those from E3SM in six different locations (see table below). To verify the performance and implementation of TChem-atm, we consider the relative root mean square error (RRMSE) of the difference between the E3SM and TChem-atm outputs.</p> Abbreviation Latitude Longitude Location LA 34.0549 -118.2426 Los Angeles, CA, USA BRW 71.323 -156.6114 North Slope, AK, USA MHD 53.326 -9.899 Halfmace, County Galway, Ireland PSA -64.7742 -64.0527 Palmer Station, Antarctica RPB 13.165 -59.432 Ragged Point, Barbados SYO -69.0125 39.59 Showa Station, Antarctica ZEP 78.9067 11.8883 Zeppelin mountain, Ny-\u00c5lesund, Norway"},{"location":"UCI_example/#troposphere-mechanism","title":"Troposphere Mechanism","text":"<p>The bash scripts and input files for UCI chemistry in the troposphere are located at <code>src/examples/runs/uci_col</code>. In this directory, we split the input file of TChem-atm into two files. One contains initial conditions, and the other file lists reactions, constant species, and active species. The chemistry file for the UCI mechanism is located at <code>src/examples/runs/uci_col/uci_v2_test3.yaml</code>. The initial conditions file for one of the UCI tests is located at <code>src/examples/runs/uci_col/input_conditions_col.yaml</code>, and corresponds to a set of cells for one location in an E3SM simulation.</p> <p>Mechanism details:</p> <ul> <li>Number of species: 82</li> <li>Number of invariants or constant species: 29</li> <li>Number of reactions: 106</li> <li>Number of Arrhenius-type reactions: 71</li> <li>Number of JPL-Troe type reactions: 10</li> <li>Number of Ratio JPL-Arrhenius type reactions : 3</li> <li>Number of Photolysis rates: 22</li> </ul> <p>An example run script for the UCI mechanism is presented below:</p> <pre><code>exec=$TCHEM_INSTALL_PATH/examples/TChem_AtmosphericChemistryE3SM.implicit_euler.x\ninput=$TCHEM_INSTALL_PATH/examples/runs/atmospheric_chemistry/uci_col/uci_v2_test3.yaml\ninputFile=$TCHEM_INSTALL_PATH/examples/runs/atmospheric_chemistry/uci_col/input_conditions_multi_col.yaml\n\nrun_this=\"$exec --chemfile=$input \\\n                --inputfile=$inputFile \\\n                --outputfile=full_gas.dat \\\n                --time-iterations-per-interval=100 \\\n                --tol-time=1e-6 \\\n                --dtmin=1800 \\\n                --dtmax=1800 \\\n                --tend=1800 \\\n                --atol-newton=1e-18 \\\n                --rtol-newton=1e-8 \\\n                --max-newton-iterations=20 \\\n                --max-time-iterations=20000\"\n\necho $run_this\neval $run_this\n</code></pre> <p>For this configuration, TChem-atm is using an implicit Euler solver. The <code>inputfile</code> flag allows the user to pass the initial condition files as an independent file of the <code>chemfile</code> type. Furthermore, TChem-atm can be directed to run executables (<code>exec</code>) for the Tines-TrBDF2 solver, <code>TChem_AtmosphericChemistryE3SM.x</code> and for CVODE, <code>TChem_AtmosphericChemistryE3SM_CVODE.x</code>; however, note that the CVODE-TChem-atm executable works only on CPUs.</p> <p> Parity plot for rate of progress in the troposphere. E3SM outputs are produced by CAMPP's generated code. There are 104 reactions, and we only display the 10 with the larges RRMSE for the locations given in the preceding table. RRMSE per location is presented in each plot. The net production rates correspond to the RHS of the equations solved by E3SM and TChem.</p>"},{"location":"UCI_example/#stratosphere-mechanism","title":"Stratosphere Mechanism","text":"<p>The UCI mechanism chemistry file for the stratosphere is located at <code>src/examples/runs/uci_col/uci_explicit_mech.yaml</code>. The initial conditions file for one of the UCI tests is located at <code>src/examples/runs/uci_col/input_conditions_explicit_part_multi_col.yaml</code>, which corresponds to one set of cells for one location in an E3SM simulation.</p> <p>Mechanism details:</p> <ul> <li>Number of species: 7</li> <li>Number of invariants or constant species invariants: 3</li> <li>Number of reactions: 5</li> <li>Number of Arrhenius-type reactions: 3</li> <li>Number of JPL-Troe type reactions: 2</li> </ul> <p>E3SM uses an explicit Euler solver to time integrate gas chemistry in the Stratosphere. In TChem-atm, we also implemented an explicit Euler solver.</p> <pre><code>exec=$TCHEM_INSTALL_PATH/examples/TChem_AtmosphericChemistryE3SM.explicit_euler.x\ninput=$TCHEM_INSTALL_PATH/examples/runs/atmospheric_chemistry/uci_col/uci_explicit_mech.yaml\ninputFile=$TCHEM_INSTALL_PATH/examples/runs/atmospheric_chemistry/uci_col/input_conditions_explicit_part_multi_col.yaml\n\nrun_this=\"$exec --chemfile=$input \\\n                --inputfile=$inputFile \\\n                --outputfile=full_gas_stratosphere.dat \\\n                --time-iterations-per-interval=100 \\\n                --tol-time=1e-6 \\\n                --dtmin=1800 \\\n                --dtmax=1800 \\\n                --tend=1800 \\\n                --atol-newton=1e-18 \\\n                --rtol-newton=1e-8 \\\n                --max-newton-iterations=20 \\\n                --max-time-iterations=20000\"\n\necho $run_this\neval $run_this\n</code></pre> <p></p> <p>Parity plot of the net production rates (RHS) in the stratosphere. RRMSE per location is presented in each plot. The net production rates correspond to the RHS of the equations solved by E3SM and TChem.</p>"},{"location":"examples/","title":"Examples","text":"<p>Carbon Bond 05</p> <p>UCI Chemistry for E3SM Version 3</p> <p>SIMPOL</p>"},{"location":"input/","title":"Input Files","text":""},{"location":"input/#gas-chemistry-input-file","title":"Gas Chemistry Input File","text":"<p>The YAML input file for atmospheric chemistry consists of five sections:</p> <ul> <li><code>environmental_conditions</code>: pressure and temperature of individual cells.</li> <li><code>initial_state</code>: initial species concentrations within the cells.</li> <li><code>reactions</code>: list of reactions with rate parameters and reaction type.</li> <li><code>constant_species</code>: species that are part of the reaction mechanism but are assumed constant in time.<ul> <li>E.g., invariant species.</li> </ul> </li> <li><code>species</code>: list of species names.</li> </ul> <p>For example, given the toy reaction \\(A \\rightarrow B\\), simulation with N cells, one reaction, and three species, we have</p> <pre><code>NCAR-version: v1.0\nenvironmental_conditions:\n  pressure:\n    evolving: false\n    initial_value: [P1, ..., PN]\n    units: Pa\n  temperature:\n    evolving: false\n    initial_value: [T1, ..., TN]\n    units: K\ninitial_state:\n  A:\n    initial_value: [A1, .., AN]\n    units: mol m-3\n  M:\n    initial_value: [M1, .., MN]\n    units: mol m-3\nreactions:\n- coefficients:\n  products:\n    B: 1.0\n  reactants:\n    A: 1.0\n  type: ARRHENIUS\nconstant_species:\n- description: tracer-CONSTANT\n  name: M\nspecies:\n- description: A\n  name: A\n- description: B\n  name: B\n</code></pre> <p>A description of the reaction types currently implemented in TChem-atm is presented in Methodology section. In addition, a set of examples of input files is presented under <code>/src/examples/runs/atmopheric_chemistry</code>.</p>"},{"location":"input/#gas-aerosol-chemistry-input-file","title":"Gas-Aerosol Chemistry Input File","text":"<p>To execute a gas-aerosol case in TChem-atm, one needs an input file with the aerosol mechanisms, <code>aerofile</code>, and a file where scenario particle information is given, <code>inputfile_particles</code>. The aerosol mechanism utilizes a YAML file and follows to the CAMP format. The scenario particle information follows this format:</p> <p><pre><code>particles:\n  initial_state:\n    species_name_1: \n      initial_value: [1.0e-8]\n    species_name_2: \n      initial_value: [1.4e-2]\n  num_concentration:\n   initial_value: [1.3e6]  \n</code></pre> In this structure, <code>species_name_1</code> denotes the initial concentration of species 1 within a single particle. It's important to note that the initial composition for species 1 is consistent across all particles.</p> <p>Additionally, to incorporate gas-phase reactions into the simulation, a gas reaction mechanism can be seamlessly integrated into the gas-aerosol case.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#obtaning-tchem-atm","title":"Obtaning TChem-atm","text":"<p>TChem-atm is open-source code available on GitHub. It can be downloaded (cloned) with the terminal command <pre><code>git clone https://github.com/PCLAeroParams/TChem-atm\n</code></pre></p> <p>TChem-atm requires the following third-party libraries:</p> <ul> <li>Tines<ul> <li>Sacado</li> <li>BLAS/LAPACK</li> <li>YAML</li> <li>Sundials</li> </ul> </li> <li>Gtest</li> <li>Skywalker</li> <li>Kokkos-kernels</li> </ul> <p>These third-party libraries are submodules in TChem-atm. Thus, we can initialize them (i.e., download and update) using the following command:</p> <pre><code>git submodule update --init --recursive\n</code></pre>"},{"location":"installation/#building-and-installing-third-party-libraries","title":"Building and installing third-party libraries","text":"<p>The script <code>scripts/tpls_bld.sh</code> clones, builds, and installs TChem-atm's third-party libraries. To use this script, one must provide compiler and configuration information at the top of the script as follows:</p> <pre><code>MY_CC=gcc # C++ compiler\nMY_CXX=g++ # C++ compiler\nMY_FC=gfortran # Fortran compiler\n</code></pre> <p>To build/install with CUDA <code>ON</code> or <code>OFF</code>, use the flag:</p> <pre><code>CUDA=\"ON\" # Set to ON/OFF to compile TChem-atm with or without NVIDIA-GPUs support.\n</code></pre> <p>To build/install with HIP <code>ON</code> or <code>OFF</code>, use the flag:</p> <pre><code>HIP=\"ON\" # Set to ON/OFF to compile TChem-atm with or without AMD-GPUs support.\n</code></pre> <p>Note that both CUDA and HIP cannot be enabled simultaneously.</p> <p>To enable OpenMP.</p> <pre><code>OPENMP=\"ON\"\n</code></pre> <p>The following path specifies the location of the TChem-atm source code.</p> <pre><code>TCHEM_REPOSITORY_PATH=/path/to/tchem-atm/.\n</code></pre> <p>Determine whether to install OpenBLAS using this script. <pre><code>INSTALL_OPENBLAS=\"ON\"\n</code></pre></p> <p>This script initializes submodules and manages the installation/building of third-party libraries within the <code>$PWD/HOST</code>, <code>$PWD/CUDA</code>, or <code>$PWD/HIP</code> directories, based on the selected settings: <code>CUDA/HIP=OFF</code>, <code>CUDA=ON</code>, or <code>HIP=ON</code>. Given that Kokkos and Kokkos-kernels support installation/building with both <code>CUDA</code> and <code>HIP</code> enabled (<code>ON</code>) or disabled (<code>OFF</code>), the script ensures their deployment in both <code>$PWD/HOST</code> and the relevant GPU-specific directories (<code>$PWD/CUDA</code> or <code>$PWD/HIP</code>). Other libraries, however, are exclusively installed in <code>$PWD/HOST</code>. To accommodate all third-party libraries, execute this script initially with <code>CUDA=OFF</code>. For systems equipped with NVIDIA or AMD GPUs, a subsequent run with CUDA=<code>ON</code> or <code>HIP=ON</code>, respectively, is necessary to leverage GPU-specific installations.</p>"},{"location":"installation/#building-and-installing-tchem-atm-and-tines","title":"Building and installing TChem-atm and Tines","text":"<p>The script <code>scripts/build_script.sh</code> builds and installs TChem-atm and Tines. Similarly to the script for third-party libraries, in <code>scripts/build_script.sh</code>, one must provide the same compiler information and CUDA/HIP flag.</p> <p>In addition, this script adds the option to turn <code>SACADO=\"ON\"</code> or <code>SACADO=\"OFF\"</code> to enable or disable the SACADO library's automatic differentiation capability.</p> <p>If OpenBLAS is included as part of a module; <code>USE_THIS_OPENBLAS=\"MODULE\"</code>.</p> <p>The installation path for the third-party libraries is specified by <code>INSTALL_BASE_HOST</code>, and <code>ROOT=/path/to/tchem-atm</code> is where TChem-atm and Tines are installed. If CUDA is <code>ON</code>, libraries will be installed in the <code>ROOT/CUDA</code> directory. If HIP is <code>ON</code>, libraries will be installed in the <code>ROOT/HIP</code> directory. Otherwise, they will be installed in the <code>ROOT/HOST</code> directory.</p> <p>Finally, To select the build type <code>BUILD_TYPE</code>, choose either <code>DEBUG</code> or <code>RELEASE</code>.</p>"},{"location":"methodology/","title":"Methodology","text":"<p>TChem-atm computes the source term or the right-hand side of the gas-species equations:</p> \\[ \\newcommand{\\dif}{\\mathrm{d}} \\newcommand{\\eee}{\\mathrm{E3SM}}   \\frac{\\dif{} \\eta_k}{\\dif{} t}=\\dot{\\omega}_k,\\quad k = 1, \\dots, N \\] <p>and its associated Jacobian matrix, \\(\\textbf{J}_{ij} = \\frac{\\partial \\dot{\\omega}_i}{\\partial \\eta_j }\\), which is evaluated using either finite differences (Tines library) or automatic differentiation (Sacado library). Furthermore, TChem-atm has an interface for Tines or CVODE ODE (ordinary differential equation) solver to advance the volumetric mixing ratio (vmr, \\(\\eta_k\\) ) of gas species, \\(k\\), in time.</p> <p>The net production rate of species \\(k\\), \\(\\dot{\\omega}_k\\), or the \"right-hand side\" of the previous equation is computed using:</p> \\[   \\dot{\\omega}_k=\\sum_{i=1}^{N_{\\text{react}}}\\nu_{ki}q_i,\\quad \\nu_{ki}=\\nu''_{ki}-\\nu'_{ki}, \\] <p>where \\(q_i\\) is the rate of progress of reaction \\(i\\), \\(N_{\\text{react}}\\) is the number of reactions and \\(\\nu''_{ki}\\) and \\(\\nu'_{ki}\\) are the stoichiometric coefficients for species \\(k\\) in reaction \\(i\\) for the reactant and product sides of the reaction, respectively. The rate of progress of reaction \\(i\\), \\(q_i\\), is computed as</p> \\[   q_i={k_f}_i\\prod_{j=1}^{N_{\\text{spec}}}\\eta_j^{\\nu'_{ji}}, \\] <p>where \\(N_{\\text{spec}}\\) is the number of species, \\({k_f}_i\\) is the reaction constant of reaction \\(i\\). The reaction constant \\({k_f}_i\\) can take several functional forms depending on the reaction type. We present below the reaction types that are available in TChem-atm.</p>"},{"location":"methodology/#aerosol-gas-interations","title":"Aerosol-Gas interations","text":"<p>TChem-atm facilitates the construction of source terms (or RHS) for gas-aerosol cases. In these cases, the RHS is constructed as follows:</p> <p></p> <p>Where, the first part of the RHS corresponds to the concentration of gas species. Then, the concentration of each particle is appended. Currently, TChem-atm supports the SIMPOL mass transfer.</p>"},{"location":"methodology/#reaction-types","title":"Reaction Types","text":"<p>Currently, TChem-atm can reproduce gas chemistry for two complex reaction mechanisms: the gas chemistry of \\(\\eee{}\\) v3, i.e., the UCI chemistry system (University of California Irvine), and the Carbon Bond 2005 chemical mechanism, which is well-formulated for urban to remote tropospheric conditions (Dawson,Yarwood). To represent these mechanisms, TChem-atm implements Troe, Arrhenius, Troe-Arrhenius ratio, and Custom-H2O2 reaction types.</p> <p>Next, we present the expression for the forward rate constant of the reaction types implemented in TChem-atm. In these equations, \\(\\mathrm{T}\\), \\(\\mathrm{P}\\), and \\([M]\\) correspond to the temperature, pressure, and air concentration.</p>"},{"location":"methodology/#arrhenius-type","title":"Arrhenius Type","text":"<p>The Arrhenius type of reaction (<code>type: ARRHENIUS</code>) is computed by</p> \\[ k_f = A \\mathop{\\mathrm{exp}} \\left( \\frac{C}{\\mathrm{T}} \\right)  \\frac{\\mathrm{T}}{D}^B (1+ E\\,\\mathrm{P}) \\] <p>Where, \\(A\\), \\(B\\), \\(C\\), and \\(D\\) are kinetic constants. As an example, the following reaction from the Carbon Bond 05 mechanism,</p> \\[ O_3 + NO \\rightarrow NO_2 + O_2, \\] <p>has the following information provided using the following YAML configuration:</p> <pre><code>- MUSICA_name: R3\n  reactants:\n    O3: 1\n    NO: 1\n  products:\n    NO2: 1\n  type: ARRHENIUS\n  coefficients:\n    A: 3e-12\n    B: 0.0\n    C: -1500.0\n    D: 0.0\n</code></pre> <p>Under <code>reactants</code> and <code>products</code>, the name and stoichiometric coefficient (\\(\\nu''_{ki}\\), \\(\\nu'_{ki}\\)) of each species is listed.</p> <p>Note that in the previous reaction, \\(O_2\\) is not considered a product in the computation of \\(k_f\\).</p>"},{"location":"methodology/#troe-type","title":"Troe Type","text":"<p>The Troe type of reaction (<code>type: TROE</code>) is computed by</p> \\[ k_f=\\frac{k_0[M]}{1+\\frac{k_0[M]}{k_{\\infty}}}F_c^{\\left(1+\\left(\\frac{\\log_{10} \\left(\\frac{k_0[M]}{k_{\\infty}} \\right)}{N}\\right)^2 \\right)^{-1}}, \\] <p>where, \\(k_0\\) and \\(k_{\\infty}\\) are computed via the following Arrhenius expression.</p> \\[ k_0 = k_{0_A} \\mathop{\\mathrm{exp}} \\left( \\frac{k_{0_C}}{\\mathrm{T}} \\right)  \\left(\\frac{\\mathrm{T}}{300}\\right)^{k_{0_B}} \\] \\[ k_{\\infty} = k_{\\infty_A} \\mathop{\\mathrm{exp}} \\left( \\frac{k_{\\infty_C}}{\\mathrm{T}} \\right) \\left(\\frac{\\mathrm{T}}{300}\\right)^{k_{\\infty_B}} \\] <p>As an example of one reaction from the Carbon Bond 05 mechanism,</p> \\[ O + NO_2 \\rightarrow NO_3 \\] <p>The kinetic constants are provided using the following format:</p> <pre><code>- MUSICA_name: R5\n  reactants:\n    O: 1\n    NO2: 1\n  products:\n    NO3: 1\n  type: TROE\n  coefficients:\n    k0_A: 2.5e-31\n    k0_B: -1.8\n    k0_C: -0.0\n    kinf_A: 2.2e-11\n    kinf_B: -0.7\n    kinf_C: -0.0\n    Fc: 0.6\n    N: 1.0\n</code></pre> <p>We use a modified version of the Troe reaction for the UCI mechanism using the <code>type: JPL</code>.</p> <p>For example, for the <code>uci6</code> reaction in the UCI mechanism:</p> \\[ HNO_3 + OH \\rightarrow NO_3 + H_2O \\] <p><pre><code>- coefficients:\n    k0_A: 6.5e-34\n    k0_B: 0\n    k0_C: 1335\n    Fc: 1\n    kinf_A: 2.7e-17\n    kinf_B: 0\n    kinf_C: 2199\n  type: JPL\n  note: uci6\n  adjust_reaction:\n  - M\n  id: '52'\n  reactants:\n    HNO3: 1\n    OH: 1\n  products:\n    NO3: 1\n    H2O: 1\n</code></pre> Note that in the  <code>JPL</code> type <code>N = 1</code>.</p>"},{"location":"methodology/#custom-h2o2-type","title":"Custom H2O2 type","text":"<p>The rate constant for the custom H2O2 type of reaction (<code>type: CMAQ_H2O2</code>) cannot be expressed as the combination of Arrhenius and Troe reaction types. Hence, TChem-atm has a specific convention for this reaction.</p> \\[ k_f = A_1 \\mathop{\\mathrm{exp}} \\left( \\frac{C_1}{\\mathrm{T}} \\right) \\left(\\frac{\\mathrm{T}}{300}\\right)^{B_1} + A_2 \\mathop{\\mathrm{exp}} \\left( \\frac{C_2}{\\mathrm{T}} \\right) \\left(\\frac{\\mathrm{T}}{300}\\right)^{B_2} V_A \\] \\[ V_A = \\frac{P\\ N_A\\ R \\times 10^{12}}{T}, \\] <p>\\(N_A=6.02214179 \\times 10^{23}\\) is Avogadro's number (\\(\\mathrm{mole}^{-1}\\)), and \\(R=8.314472\\) is the universal gas constant (\\(J\\ \\mathrm{mole}^{-1}\\ K^{-1}\\)).</p> <p>As an example of this reaction from the Carbon Bond 05 mechanism:</p> \\[ 2HO_2 \\rightarrow H_2O_2 \\] <pre><code>- MUSICA_name: R34\n  reactants:\n    HO2: 2\n  products:\n    H2O2: 1\n    DUMMY: 1\n  type: CMAQ_H2O2\n  coefficients:\n    k1_A: 2.3e-13\n    k1_C: 600.0\n    k2_A: 1.7e-33\n    k2_C: 1000.0\n</code></pre>"},{"location":"methodology/#custom-oh_hno3","title":"Custom OH_HNO3","text":"<p>The Carbon Bond 05 mechanism employs this reaction type and can be expressed as the sum of Arrhenius and Troe reaction types, i.e., \\(k_f=k_{\\text{troe}} + k_{\\text{arrhenius}}\\). Hence, one must specify two reactions in the YAML input files. For example:</p> \\[ HNO_3 + OH \\rightarrow NO_3 \\] <pre><code>- coefficients:\n    A: 2.4e-14\n    C: 460.0\n  note: CMAQ_OH_HNO3\n  products:\n    NO3: 1.0\n  reactants:\n    HNO3: 1.0\n    OH: 1.0\n  type: ARRHENIUS\n- coefficients:\n    k0_A: 6.5e-34\n    k0_C: 1335.0\n    kinf_A: 2.7e-17\n    kinf_C: 2199.0\n    Fc : 1\n  note: CMAQ_OH_HNO3\n  products:\n    NO3: 1.0\n  reactants:\n    HNO3: 1.0\n    OH: 1.0\n  type: TROE\n</code></pre>"},{"location":"methodology/#troe-arrhenius-ratio-type","title":"Troe-Arrhenius Ratio Type","text":"<p>This reaction type (<code>type: R_JPL_ARRHENIUS</code>) is computed as the ratio between Troe (or JPL) and Arrhenius types, i.e., \\(k_f=k_{\\text{troe}}/k_{\\text{arrhenius}}\\).</p> <p>The addition of this reaction type to represent UCI reactions required custom-defined rate coefficients (UCI #7-9). As an example, for the <code>uci7</code> reaction:</p> \\[ HO_2NO_2 + M \\rightarrow HO_2 + NO_2 + M \\] <pre><code>- coefficients:\n    k0_A: 1.9e-31\n    k0_B: -3.4\n    Fc: 0.6\n    kinf_A: 4e-12\n    kinf_B: -0.3\n    A: 2.1e-27\n    B: 0\n    C: 10900.0\n  type: R_JPL_ARRHENIUS\n  note: uci7\n  adjust_reaction:\n  - M\n  id: '57'\n  reactants:\n    HO2NO2: 1\n    M: 1\n  products:\n    HO2: 1\n    NO2: 1\n    M: 1\n</code></pre>"},{"location":"methodology/#usr_dms_oh","title":"usr_DMS_OH","text":"<p>The reaction type <code>usr_DMS_OH</code> is part of the UCI mechanism and is hard-coded in the <code>mo_usrrxt</code> submodule in \\(\\eee\\)'s code. In TChem, we reformulate this reaction type as a Troe (or JPL) reaction type using the following configuration.</p> <pre><code>- coefficients:\n    k0_A: 3.57e-43\n    k0_B: 0\n    k0_C: 7810\n    Fc: 1\n    kinf_A: 3.0909090909090913e-12\n    kinf_B: 0\n    kinf_C: 350\n  type: JPL\n  note: usr_DMS_OH\n  adjust_reaction: [M, M]\n  id: '89'\n  reactants:\n    DMS: 1\n    OH: 1\n  products:\n    SO2: 0.5\n    HO2: 0.5\n</code></pre>"},{"location":"methodology/#usr_so2_oh","title":"usr_SO2_OH","text":"<p>The reaction type <code>usr_SO2_OH</code> is part of the UCI mechanism and is hard-coded in the <code>mo_usrrxt</code> submodule in \\(\\eee\\)'s code. In TChem, we reformulate this reaction type as a Troe (or JPL) reaction type using the following configuration.</p> <pre><code>- coefficients:\n    k0_A: 3e-31\n    k0_B: -3.3\n    k0_C: 0\n    Fc: 0.6\n    N: 1.0\n    kinf_A: 1.5e-12\n    kinf_B: 0\n    kinf_C: 0\n  type: JPL\n  note: usr_SO2_OH\n  adjust_reaction: [M, M]\n  id: '90'\n  reactants:\n    SO2: 1\n    OH: 1\n  products:\n    H2SO4: 1\n</code></pre>"},{"location":"methodology/#modifier-prod-o1d","title":"Modifier prod O1D","text":"<p>Reaction types UCI 1, 2, 3 in the UCI mechanism require a modifier to compute the reaction rate. We did not include this modifier under the <code>reaction</code> section of the input file; instead, we created the section <code>modifier_prod_O1D</code>.</p> \\[ \\mathrm{factor} = \\frac{\\mathrm{prod_{O1D}}}{f_c} \\] <p>where, \\(f_c\\)</p> \\[ f_c = A_1 \\mathop{\\mathrm{exp}} \\left(\\frac{C_1}{\\mathrm{T}} \\right) [\\mathrm{N_2}] + A_2 \\mathop{\\mathrm{exp}} \\left(\\frac{C_2}{\\mathrm{T}} \\right) [\\mathrm{O_2}] + A_3 \\mathop{\\mathrm{exp}} \\left(\\frac{C_3}{\\mathrm{T}} \\right) [\\mathrm{H_2O}] \\] <p>The YAML configuration for this modifier is :</p> <p><pre><code>modifier_prod_O1D:\n  coefficients:\n    A1: 2.15e-11\n    C1: 110.0\n    A2: 3.3e-11\n    C2: 55.0\n    A3: 1.63e-10\n    C3: 60.0\n  species_name_1: N2\n  species_name_2: O2\n  species_name_3: H2O\n  reaction_list:\n  - 22\n  - 23\n  - 24\n  photolysis_reaction_index: 0\n</code></pre> Here, under <code>coefficients</code>, the kinetic parameters are presented. The species involved in this factor are listed as <code>species_name_1</code> and <code>species_name_2</code>. Note that TChem will find the index of the proper corresponding species. The <code>reaction_list</code> gives the index of the reactions for which this modifier is applied. Finally, <code>photolysis_reaction_index</code> is the index of the \\(\\mathrm{prod_{O1D}}\\) reaction.</p> <p>Future work will convert <code>reaction_list</code> from a list of indices to reaction IDs, as will <code>photolysis_reaction_index</code>. Thus, one does not need to know the index of each reaction before running a TChem simulation.</p>"},{"location":"methodology/#gas-aerosol-reaction-types","title":"Gas-Aerosol Reaction Types","text":""},{"location":"methodology/#simpol-mass-transfer","title":"SIMPOL mass transfer","text":"<p>It calculates the evaporation rate of organic species that partition between the gas and aerosol phase, based on the parameterization by Pankow and Asher (2008).</p> <p>TChem-atm utilizes a YAML file and follows to the CAMP format to specify SIMPOL types.</p>"}]}